docker hub 
    username: eagbayani
    email   : eagbayani173@gmail.com
    pw      : ile173x

docker -help                #to see all available commands
docker COMMAND --help       #for more information on a command.

docker run image_name       #load an image in a container
docker images               #list all images
docker rmi -f image_name    #force remove an image
docker search mediawiki     #search the Docker Hub for images

docker build -t docker-whale .  #takes the Dockerfile in the current directory, and builds an image called docker-whale on your local machine
docker run docker-whale         #run your new image docker-whale

Tag, Login and Push
docker tag image_id eagbayani/docker-whale:latest                                       #tag your new image, so you can push to Docker Hub
docker login --username=eagbayani --password=ile173x --email=eagbayani173@gmail.com     #login in command line, so you can push
docker push eagbayani/docker-whale                                                      #now you can push

docker pull eagbayani/docker-whale  #to pull an image from Docker Hub

-------------------------------------------------------------------------------
You can run Docker from the Docker Quickstart Terminal or from the Shell:

open a terminal
docker-machine create --driver virtualbox default   #Create a new Docker VM.
docker-machine ls                                   #List your available machines.
eval "$(docker-machine env default)"                #Connect your shell to the default machine.
docker run hello-world                              #now you can load any image to a container

-------------------------------------------------------------------------------
docker-machine ls   #list all docker-machines
docker ps           #list all running containers


docker run -d -P --name web nginx   #Start an NGINX container on the DOCKER_HOST.
docker port web                     #View just the container’s ports.
    443/tcp -> 0.0.0.0:49156
    80/tcp -> 0.0.0.0:49157
docker-machine ip default           #Get the address of the [default] VM.
    192.168.59.103
    http://192.168.59.103:49157     #put in browser and it should work

#To stop and then remove your running nginx container:
docker stop web
docker rm web

-------------------------------------------------------------------------------
docker run -d -P -v $HOME/site:/usr/share/nginx/html \--name mysite nginx
#get domain and port like above, then these in browser:
    http://192.168.99.100:32771/
    http://192.168.99.100:32771/cool.html
docker stop mysite
docker rm mysite
-------------------------------------------------------------------------------
docker run ubuntu:14.04 /bin/echo 'Hello world'
docker run -t -i ubuntu:14.04 /bin/bash             #type 'exit' to exit the shell or CTRL-D
docker run -d ubuntu:14.04 /bin/sh -c "while true; do echo hello world; sleep 1; done"  #a daemonized hello-world
docker ps   #to get the name of the container
docker logs container_name
docker stop container_name
-------------------------------------------------------------------------------
docker --help
docker attach --help

docker ps -l    #show last container started
docker ps -a    #list all, plus those stopped containers

docker run -d -P training/webapp python app.py

docker port prickly_payne 5000  #A network port shortcut
docker logs -f prickly_payne    #interactive log
docker top prickly_payne        #examine the processes running inside container
docker inspect prickly_payne                                        #inspect
docker inspect -f '{{ .NetworkSettings.IPAddress }}' prickly_payne  #inspect specific item
docker stop prickly_payne
docker start prickly_payne  #u can still start if you haven't Docker rm your container yet
docker restart prickly_pane #this will stop and start your container
docker rm prickly_pane      #removes the container

#running repo with tag:
$ docker run -t -i ubuntu:14.04 /bin/bash   #Repository = ubuntu | Tag = 14.04
-------------------------------------------------------------------------------
Updating and committing an image
$ docker run -t -i training/sinatra /bin/bash   #training/sinatra is the image
root@0b2616b0e5a8:/# gem install json           #Inside our running container let’s add the json gem.
$ docker commit -m "Added json gem" -a "Kate Smith" 0b2616b0e5a8 ouruser/sinatra:v2                 #then commit
docker images                                   #check our new image
docker run -t -i ouruser/sinatra:v2 /bin/bash   #to run our new image
-------------------------------------------------------------------------------
START REAL WORLD HERE:
#using the MySQL official repository in Docker: https://hub.docker.com/_/mysql/
docker run --name eli-mysql -e MYSQL_ROOT_PASSWORD=m173 -d mysql:5.6.24
docker run --name eli-mysql -v /usr/local/mysql-5.6.24-osx10.8-x86_64/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=m173 -d mysql:5.6.24

docker run --name eli-mysql -v /usr/local/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=m173 -d mysql:5.6.24
docker run --name eli-mysql -v /usr/local/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=m173 -d mysql:5.6.24

#run this in terminal:
chcon -Rt svirt_sandbox_file_t /usr/local/mysql-5.6.24-osx10.8-x86_64/data
sudo chmod -R 777 /usr/local/mysql-5.6.24-osx10.8-x86_64/data
sudo chmod -R 777 /usr/local/mysql/data

sudo chmod -R 777 /usr/local/mysql-5.6.24-osx10.8-x86_64
sudo chmod -R 777 /usr/local/mysql


docker run --name eli-mediawiki --link eli-mysql:mysql -p 8080:80                                           -d synctree/mediawiki
docker run --name eli-mediawiki --link eli-mysql:mysql -p 8080:80 -v ~/Docker_files/mediawiki:/var/www/html -d synctree/mediawiki
                                                                  -v ~/Docker_files/mediawiki:/var/www/html
docker exec -it eli-mediawiki bash

docker run --name eli-mediawiki -e MEDIAWIKI_DB_HOST=172.17.0.56:3306 -e MEDIAWIKI_DB_USER=root -e MEDIAWIKI_DB_PASSWORD=m173 synctree/mediawiki

docker run --name eli-mediawiki -e MEDIAWIKI_DB_HOST=172.17.0.62:3306 -e MEDIAWIKI_DB_USER=root -e MEDIAWIKI_DB_PASSWORD=m173 \
                                -p 8080:80 \
                                -v ~/Docker_files/mediawikix:/var/www/html
                                -d synctree/mediawiki
                                
docker run --name eli-mediawiki -e MEDIAWIKI_DB_HOST=10.0.0.1:3306 -e MEDIAWIKI_DB_USER=app -e MEDIAWIKI_DB_PASSWORD=m173 synctree/mediawiki

docker build -t eli-php-app .
docker run -it --rm --name eli-running-app --link eli-mysql:mysql -p 8080:80 eli-php-app
docker run -it --rm --name eli-running-app --link eli-mysql:mysql -e MYSQL_ROOT_PASSWORD=m173 -p 8080:80 eli-php-app




docker inspect -f '{{ .NetworkSettings.IPAddress }}' eli-mediawiki
docker-machine ip default


---------------------------

Mac OSX MySQL data dir: /usr/local/mysql/data:
Mac OSX web dir:        /Library/WebServer/Documents/mediawiki-1.25.1:
                        /Volumes/MacMini_HD/Library/WebServer/Documents/mediawiki1251:

-------------------------------------
inside [~/Docker_files/Docker_official/MySQL/mysql-e892e8c52485535cce5dbadaba2c579fcc805f21/5.6_eli:]
docker build -t eli-mysql .
docker run --name elix-mysql -v /usr/local/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=m173 -d eli-mysql
docker run --name eli-mediawiki --link elix-mysql:mysql -p 8080:80 -v ~/Docker_files/mediawiki:/var/www/html -d synctree/mediawiki

------------------------------------------
Existing EOL containers are here -- https://github.com/EolDocker
And we download them from           https://hub.docker.com/u/encoflife/dashboard/

using EOL MySQL container [~/Downloads/Docker others/EOL/mysql-master:]

----------------------------------------------
using EOL's NO SUCCESS

encoflife/mysql 

docker run --name eli-mysql -v /usr/local/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=m173 -d encoflife/mysql
docker run --name eli-mysql -e MYSQL_ROOT_PASSWORD=m173 -d encoflife/mysql
docker run --name eli-mediawiki --link eli-mysql:mysql -p 8080:80 -v ~/Docker_files/mediawiki:/var/www/html -d synctree/mediawiki

--------------------------------------------------
MySQL data dir: /usr/local/mysql/data
docker run --name eli-mysql -v /usr/local/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=m173 -d mysql:5.6.24



